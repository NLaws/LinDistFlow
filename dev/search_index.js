var documenterSearchIndex = {"docs":
[{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Some various methods used in LinDistFlow.jl:","category":"page"},{"location":"methods/","page":"Methods","title":"Methods","text":"j_to_k\ni_to_j\nsinglephase38linesInputs","category":"page"},{"location":"math/#Single-Phase-LinDistFlow","page":"Math","title":"Single Phase LinDistFlow","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"From [1]","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"Notation:","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"P_ij real power flow from node i to node j\np_j real power injection on node j\n`\\\\mathcal{N}^+ set of all nodes in network except the source\nw_j voltage magnitude squared on node j","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\nP_ij + p_j = sum_kjrightarrow k P_jk  forall j in mathcalN^+ \nQ_ij + q_j = sum_kjrightarrow k Q_jk  forall j in mathcalN^+ \nw_j = w_i - 2 r_ij P_ij - 2 x_ij Q_ij  forall j in mathcalN^+ \n(v_jmin)^2 le w_j le (v_jmax)^2  forall j in mathcalN^+ \nendaligned","category":"page"},{"location":"math/#Three-Phase-LinDistFlow","page":"Math","title":"Three Phase LinDistFlow","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"From [2]","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\nP_ijphi + p_jphi = sum_kjrightarrow k P_jkphi  forall j in mathcalN^+ forall phi in 123 \nQ_ijphi + q_jphi = sum_kjrightarrow k Q_jkphi  forall j in mathcalN^+ forall phi in 123 \nboldsymbolw_j = boldsymbolw_i + boldsymbolM_Pij boldsymbolP_ij + boldsymbolM_Qij boldsymbolQ_ij \n(boldsymbolv_jmin)^2 le boldsymbolw_j le (boldsymbolv_jmax)^2  forall j in mathcalN^+ \nboldsymbolM_Pij = beginbmatrix\n-2r_11                 r_12-sqrt3x_12  r_13+sqrt3x_13 \n  r_21+sqrt3x_21  -2r_22  r_23-sqrt3x_23 \n  r_31-sqrt3x_31  r_32+sqrt3x_32  -2r_33\nendbmatrix \nboldsymbolM_Qij = beginbmatrix\n-2x_11                   x_12+sqrt3r_12    x_13-sqrt3r_13 \n  x_21-sqrt3r21   -2x_22                   x_23+sqrt3r_23 \n  x_31+sqrt3r_31    x_32-sqrt3r_32  -2x_33\nendbmatrix \nendaligned","category":"page"},{"location":"math/#References","page":"Math","title":"References","text":"","category":"section"},{"location":"math/#[1]","page":"Math","title":"[1]","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Baran, Mesut E., and Felix F. Wu. \"Optimal capacitor placement on radial distribution systems.\" IEEE Transactions on power Delivery 4.1 (1989): 725-734. Chicago\t","category":"page"},{"location":"math/#[2]","page":"Math","title":"[2]","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Arnold, Daniel B., et al. \"Optimal dispatch of reactive power for voltage regulation and balancing in unbalanced distribution systems.\" 2016 IEEE Power and Energy Society General Meeting (PESGM). IEEE, 2016.","category":"page"},{"location":"#LinDistFlow.jl","page":"User Documentation","title":"LinDistFlow.jl","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"LinDistFlow builds the linear distflow constraints using JuMP.  The intent of this package is to allow users to build mathematical programs that include LinDistFlow constraints. No objective is added to the JuMP model in this package and so solving any problem defined by the constraints built by LinDistFlow.jl is a feasibility problem. Dictionaries of constraints are provided so that one can delete and/or modify the base constraints to fit their problem.","category":"page"},{"location":"#Inputs","page":"User Documentation","title":"Inputs","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"There are two methods for creating Inputs:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Using openDSS files\nProviding the network topology","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Inputs(::String, ::String)\nInputs(::Array{Tuple}, ::Array{String}, ::Array{Float64}, ::Vector{Vector}, ::String)","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Both of the Inputs functions return a mutable Inputs struct:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Inputs","category":"page"},{"location":"#Building-a-Model","page":"User Documentation","title":"Building a Model","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"The build_ldf! function takes a JuMP.Model and Inputs struct as its two arguments and adds the variables and constraints:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"build_ldf!","category":"page"},{"location":"#LinDistFlow.build_ldf!","page":"User Documentation","title":"LinDistFlow.build_ldf!","text":"build_ldf!(m::JuMP.AbstractModel, p::Inputs)\n\nAdd variables and constraints to m using the values in p. Calls the following functions:\n\nadd_variables(m, p)\nconstrain_power_balance(m, p)\nconstrain_substation_voltage(m, p)\nconstrain_KVL(m, p)\nconstrain_loads(m, p)\n\n\n\n\n\n","category":"function"},{"location":"#Variables","page":"User Documentation","title":"Variables","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Let m be the JuMP.Model provided by the user, then the variables can be accessed via:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"m[:vsqrd] voltage magnitude squared, indexed on busses, (phases), time\nm[:Pj], m[:Qj] net real, reactive power injection, indexed on busses, (phases), time\nm[:Pij], m[:Qij] net real, reactive line flow, indexed on edges, (phases), time","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"After a model has been solved using JuMP.optimize! variable values can be extracted with JuMP.value. For more see Getting started with JuMP.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"note: Note\nSingle phase models do not have a phase index","category":"page"},{"location":"#Accessing-and-Modifying-Constraints","page":"User Documentation","title":"Accessing and Modifying Constraints","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Let the JuMP.Model provided by the user be called m. All constraints are stored in m[:cons] as anonymous constraints.","category":"page"},{"location":"#Power-Injections","page":"User Documentation","title":"Power Injections","text":"","category":"section"},{"location":"","page":"User Documentation","title":"User Documentation","text":"LinDistFlow.jl uses the convention that power injections are positive (and loads are negative). If no load is provided for a given bus (and phase) then the real and reactive power injections at that bus (and phase) are set to zero with an equality constraint.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"All power injection constraints are stored in m[:cons][:injection_equalities]. The constraints are indexed in the following order:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"by bus name (string), as provided in Inputs.busses;\nby :P or :Q for real and reactive power respectively;\nby phase number (integer); and\nby time (integer).","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"For example, m[:cons][:injection_equalities][\"680\"][:P][2][1] contains the constraint reference for the power injection equality constraint for bus \"680\", real power, on phase 2, in time step 1.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"If one wished to replace any constraint one must first delete the constraint using the delete function. For example:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"delete(m, m[:cons][:injection_equalities][\"680\"][:P][1])","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"Note that the time index was not provided in the delete command in this example, which implies that the equality constraints for all time steps were deleted. One can also delete individual time step constraints by providing the time index.","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"The deleted constraints can then be replaced with a new set of constraints. For example:","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"m[:cons][:injection_equalities][\"680\"][:P][1] = @constraint(m, [t in 1:p.Ntimesteps],\n    m[:Pj][\"680\",1,t] == -1e3 / p.Sbase\n)","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"where p is short for \"parameters\" and is the Inputs struct for the problem of interest. Note that it is not necessary to store the new constraints in the m[:cons][:injection_equalities].","category":"page"},{"location":"","page":"User Documentation","title":"User Documentation","text":"See the JuMP documentation for more on deleting constraints.","category":"page"}]
}
