var documenterSearchIndex = {"docs":
[{"location":"math/#Single-Phase-LinDistFlow","page":"Math","title":"Single Phase LinDistFlow","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Baran, Mesut E., and Felix F. Wu. \"Optimal capacitor placement on radial distribution systems.\" IEEE Transactions on power Delivery 4.1 (1989): 725-734. Chicago\t","category":"page"},{"location":"math/","page":"Math","title":"Math","text":"beginaligned\nP_ij + p_j = sum_kjrightarrow k P_jk  forall j in mathcalN^+ \nQ_ij + q_j = sum_kjrightarrow k Q_jk  forall j in mathcalN^+ \nw_j = w_i - 2 r_ij P_ij - 2 x_ij Q_ij  forall j in mathcalN^+ \n(v_jmin)^2 le w_j le (v_jmax)^2  forall j in mathcalN^+ \nendaligned","category":"page"},{"location":"math/#Three-Phase-LinDistFlow","page":"Math","title":"Three Phase LinDistFlow","text":"","category":"section"},{"location":"math/","page":"Math","title":"Math","text":"Arnold, Daniel B., et al. \"Optimal dispatch of reactive power for voltage regulation and balancing in unbalanced distribution systems.\" 2016 IEEE Power and Energy Society General Meeting (PESGM). IEEE, 2016.","category":"page"},{"location":"#LinDistFlow.jl","page":"Home","title":"LinDistFlow.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinDistFlow builds the linear distflow constraints using JuMP. Currently only the single phase model is supported, but the multiphase unbalanced model is under progress.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The intent of this package is to allow users to build mathematical programs that include LinDistFlow constraints. No objective is added to the JuMP model in this package and so solving any problem defined by the constraints built by LinDistFlow.jl is a feasibility problem. Dictionaries of constraints are provided so that one can delete and/or modify the base constraints to fit their problem.","category":"page"},{"location":"#Accessing-and-Modifying-Constraints","page":"Home","title":"Accessing and Modifying Constraints","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let the JuMP.Model provided by the user be called m. All constraints are stored in m[:cons] as anonymous constraints.","category":"page"},{"location":"#Power-Injections","page":"Home","title":"Power Injections","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinDistFlow.jl uses the convention that power injections are positive (and loads are negative). If no load is provided for a given bus (and phase) then the real and reactive power injections at that bus (and phase) are set to zero with an equality constraint.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All power injection constraints are stored in m[:cons][:injection_equalities]. The constraints are indexed in the following order:","category":"page"},{"location":"","page":"Home","title":"Home","text":"by bus name (string), as provided in Inputs.busses;\nby :P or :Q for real and reactive power respectively;\nby phase number (integer); and\nby time (integer).","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, m[:cons][:injection_equalities][\"680\"][:P][2][1] contains the constraint reference for the power injection equality constraint for bus \"680\", real power, on phase 2, in time step 1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If one wished to replace any constraint one must first delete the constraint using the delete function. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"delete(m, m[:cons][:injection_equalities][\"680\"][:P][1])","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that the time index was not provided in the delete command in this example, which implies that the equality constraints for all time steps were deleted. One can also delete individual time step constraints by providing the time index.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The deleted constraints can then be replaced with a new set of constraints. For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"m[:cons][:injection_equalities][\"680\"][:P][1] = @constraint(m, [t in 1:p.Ntimesteps],\n    m[:Pâ±¼][\"680\",1,t] == -1e3 / p.Sbase\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where p is short for \"parameters\" and is the Inputs struct for the problem of interest. Note that it is not necessary to store the new constraints in the m[:cons][:injection_equalities].","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the JuMP documentation for more on deleting constraints.","category":"page"}]
}
